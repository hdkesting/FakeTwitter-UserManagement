package nl.hdkesting.javatwitter.accounts.services;

import org.jetbrains.annotations.NotNull;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

public class Encryptor {
    private static final String SEPARATOR = ":";
    private static final String ALGORITHM = "SHA-512";

    // no instance wanted
    private Encryptor(){}

    public static String encrypt(@NotNull String clearTextPassword) {
        if (clearTextPassword == null) {
            throw new IllegalArgumentException("password cannot be null");
        }
        // create a random salt
        byte[] salt = createSalt();
        String saltString = Base64.getEncoder().encodeToString(salt);
        String hashString = hashToString(clearTextPassword, salt);

        // combine salt and hash
        return saltString + SEPARATOR + hashString;
    }

    public static boolean validate(@NotNull String clearTextPassword, @NotNull String hash) {
        if (clearTextPassword == null) {
            throw new IllegalArgumentException("password cannot be null");
        }

        // separate into salt and hash
        String[] parts = hash.split(SEPARATOR); // salt : hash
        if (parts.length != 2) {
            // cannot be a hash that was generated by "Encrypt"
            return false;
        }

        // get bytes of salt
        byte[] salt  = Base64.getDecoder().decode(parts[0]);
        String hashString = hashToString(clearTextPassword, salt);

        // compare
        return parts[1].equals(hashString);
    }

    // hash the clearTextPassword using the salt and return result as base64 encoded string.
    private static String hashToString(String clearTextPassword, byte[] salt) {
        try {
            MessageDigest md = MessageDigest.getInstance(ALGORITHM);
            md.update(salt);

            // get the salted hash
            byte[] hashBytes = md.digest(clearTextPassword.getBytes(StandardCharsets.UTF_8));

            // convert to base64 encoded string
            String hashString = Base64.getEncoder().encodeToString(hashBytes);
            return hashString;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return null;
    }

    private static byte[] createSalt() {
        SecureRandom rng = new SecureRandom();
        byte[] salt = new byte[16];
        rng.nextBytes(salt);

        return salt;
    }
}
